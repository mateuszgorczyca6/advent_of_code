from unittest import TestCase
from ddt import ddt, data, unpack

from index08 import get_unique_locations_with_antinode_count, get_unique_locations_with_extended_antinode_count, set_up


# has 2 antinodes
INPUT1 = """..........
..........
..........
....a.....
..........
.....a....
..........
..........
..........
.........."""


# has 4 antinodes
INPUT2 = """..........
..........
..........
....a.....
........a.
.....a....
..........
..........
..........
.........."""


# has 4 antinodes
INPUT3 = """..........
..........
..........
....a.....
........a.
.....a....
..........
......A...
..........
.........."""


# has 14 antinodes
# has 34 extended antinodes
INPUT4 = """............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............"""


# has 1 antinodes
INPUT5 = """......
...b.b
......
.a....
......
.a...."""


# has 9 extended antinodes
INPUT6 = """T.........
...T......
.T........
..........
..........
..........
..........
..........
..........
..........
"""


@ddt
class TestBridgeRepair(TestCase):
    @data(
        {'input': INPUT1, 'expected': 2},
        {'input': INPUT2, 'expected': 4},
        {'input': INPUT3, 'expected': 4},
        {'input': INPUT4, 'expected': 14},
        {'input': INPUT5, 'expected': 1},
    )
    @unpack
    def test_get_unique_locations_with_antinode_count(self, input: str, expected: int):
        _, antennas_pairs_by_value = set_up(input)
        result = get_unique_locations_with_antinode_count(antennas_pairs_by_value)
        self.assertEqual(result, expected)

    @data(
        {'input': INPUT4, 'expected': 34},
        {'input': INPUT6, 'expected': 9},
    )
    @unpack
    def test_get_unique_locations_with_extended_antinode_count(self, input: str, expected: int):
        map, antennas_pairs_by_value = set_up(input)
        result = get_unique_locations_with_extended_antinode_count(map, antennas_pairs_by_value)
        self.assertEqual(result, expected)
